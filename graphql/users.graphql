# Query
extend type Query {
    user(id: ID @eq): User @find  @test
    userWithEmail(email: String @eq): User @find
    users(input: UserFilterInput): [User] @paginate(defaultCount:10 resolver:"App\\GraphQL\\Queries\\UserQuery@filterUser") @authorized
    checkOtp(input: UserOtp): UserResetResponse @field(resolver:"App\\GraphQL\\Queries\\UserQuery@checkOtp")
    me: User @auth
    exportMonitoringSheet(input: ExportingUser): ExportResponse @field(resolver: "App\\GraphQL\\Queries\\UserQuery@exportMonitoringSheet")
    pendingMembers: [PendingEmails] @field(resolver: "App\\GraphQL\\Queries\\JoinRequestQuery@pendingRequests") @can(ability: "isRootUser",model: "App\\Models\\User") @guard
}

# Mutation
extend type Mutation {
    login(input: UserLoginInput): LoginResponse @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@loginUser")
    forgetPassword(input: UserForgetPasswordInput): String @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@forgetPassword")
    resetPassword(input: UserResetPasswordInput): LoginResponse @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@resetPassword")
    acceptInvitation(input: UserInvitationInput): LoginResponse @field(resolver: "App\\GraphQL\\Mutations\\UserMutation@acceptInvitation")
    profile(input: UserProfileInput): User @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@profileEdit") @guard
    changeStatus(status_id: Int): User @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@changeStatus") @guard
    inviteMember(input: inviteMemberInput): PendingEmails @field(resolver: "App\\GraphQL\\Mutations\\UserMutation@inviteMember") @guard 
    switchCompany(companyid: ID): Response @field(resolver: "App\\GraphQL\\Mutations\\UserMutation@switchCompany") @guard @validator
    toggleUserSuspended(user_id: ID): Response @field(resolver: "App\\GraphQL\\Mutations\\UserMutation@toggleUserSuspended") @validator @can(ability: "isRootUser",model:"App\\Models\\User") @guard
    deletePendingRequest(request_id: ID): Response @field(resolver: "App\\GraphQL\\Mutations\\JoinRequestsMutation@deleteRequest") @can(ability: "isRootUser",model:"App\\Models\\User") @guard
    deleteUser(user_id: ID): Response @field(resolver: "App\\GraphQL\\Mutations\\UserMutation@deleteUser") @validator @can(ability: "isRootUser",model:"App\\Models\\User") @guard 
}

# Types 
type User {
    id: ID,
    email: String,
    name:  String,
    token: String,
    status: Status @belongsTo,
    active_company_id: ID,
    accessable_companies: [Company],
    is_suspend: Boolean,
    is_root: Boolean 
}

type LoginResponse  {
    status: String,
    token: String,
    user: User
}

type UserResetResponse {
    status: String,
    message: String
}

type Status {
    id: ID,
    name: String,
}

type Response {
    status: String,
    message: String,
    user: User
}

type SwitchCompany {
    company: Company,
    users: User
}

type ExportResponse {
    path: String
}

type PendingEmails {
    email: String,
    id: Int
}

# Inputs 
input UserFilterInput @validator {
    id: ID,
    email: String,
    name: String,
    page: Int
}

input UserInput @validator {
    email: String,
    name: String
}

input UserLoginInput @validator {
    email: String,
    password: String
}

input UserForgetPasswordInput @validator {
    email: String
}

input UserResetPasswordInput @validator {
    email: String,
    verificationID: String,
    password: String,
    otp: String
}

input UserOtp {
    email: String,
    otp: String
}

input UserProfileInput @validator {
    name: String,
    phone: String,
    avatar: Upload
}

input UserRegisterInput {
    name: String,
    email: String,
    phone: String,
    password: String,
    paymentId: String,
    type: Int,
}

input inviteMemberInput @validator {
    email: String
}

input UserInvitationInput @validator {
    email: String,
    token: String,
    password: String,
    name: String
}

input ExportingUser {
    filters: UserFilterInput,
    duration: Int
}