# Query
extend type Query {
    user(id: ID @eq): User @find 
    userWithEmail(email: String @eq): User @find
    users(input: UserFilterInput): [User] @paginate(defaultCount:10 resolver:"App\\GraphQL\\Queries\\UserQuery@filterUser")
    checkOtp(input: UserOtp): UserResetResponse @field(resolver:"App\\GraphQL\\Queries\\UserQuery@checkOtp")
    me: User @auth
}

# Mutation
extend type Mutation {
    login(input: UserLoginInput): LoginResponse @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@loginUser")
    forgetPassword(input: UserForgetPasswordInput): String @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@forgetPassword")
    resetPassword(input: UserResetPasswordInput): LoginResponse @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@resetPassword")
    profile(input: UserProfileInput): User @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@profileEdit") @guard
    changeStatus(status_id: Int): User @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@changeStatus") @guard
    inviteMember(email: String): User @field(resolver: "App\\GraphQL\\Mutations\\UserMutation@inviteMember") @guard
    changeEmail(email: String): User @field(resolver: "App\\GraphQL\\Mutations\\UserMutation@changeEmail") @guard
}

# Types 
type User {
    id: ID,
    email: String,
    name:  String,
    token: String,
    status: Status
}

type LoginResponse  {
    status: String,
    token: String,
    user: User
}

type UserResetResponse {
    status: String,
    message: String
}

type Status {
    id: ID,
    name: String
}

# Inputs 
input UserFilterInput @validator {
    id: ID,
    email: String,
    name: String,
}

input UserInput @validator {
    email: String,
    name: String
}

input UserLoginInput @validator {
    email: String,
    password: String
}

input UserForgetPasswordInput @validator {
    email: String
}

input UserResetPasswordInput @validator {
    email: String,
    verificationID: String,
    password: String,
    otp: String
}

input UserOtp {
    email: String,
    otp: String
}

input UserProfileInput @validator {
    name: String,
    phone: String,
    avatar: Upload
}

input UserRegisterInput {
    name: String,
    email: String,
    phone: String,
    password: String,
    paymentId: String,
    type: Int,
}