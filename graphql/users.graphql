# Query
extend type Query {
    user(id: ID @eq): User @find 
    users(input: UserFilterInput): [User] @paginate(defaultCount:10 resolver:"App\\GraphQL\\Queries\\UserQuery@filterUser")
}

# Mutation
extend type Mutation {
    upsert(input: UserInput): User @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@upsert")
    login(input: UserLoginInput): LoginResponse @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@loginUser")
    forgetPassword(input: UserForgetPasswordInput): String @field(resolver:"App\\GraphQL\\Mutations\\UserMutation@forgetPassword")
}

# Types 
type User {
    id: ID,
    email: String,
    name: String,
}

type LoginResponse  {
    status: String,
    token: String,
    user: User
}

# Inputs 
input UserFilterInput @validator {
    id: ID,
    email: String,
    name: String,
}

input UserInput @validator {
    email: String,
    name: String
}

input UserLoginInput @validator {
    email: String,
    password: String
}

input UserForgetPasswordInput @validator {
    email: String
}


